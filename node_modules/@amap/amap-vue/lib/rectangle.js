"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./load-plugins.js"),r=require("./mixins/mixins.js"),t=require("./utils/amap-helpers.js"),n=require("./mixins/props.js"),a=require("./mixins/geometry.js"),s=require("./mixins/editable.js");function i(e,r){return!(!e||!r)&&(t.near(e[0][0],r[0][0])&&t.near(e[0][1],r[0][1])&&t.near(e[1][0],r[1][0])&&t.near(e[1][1],r[1][1]))}var d=r.default(a.plane,s.default).extend({name:"AmapRectangle",amapMeta:{initComponent:async(e,r)=>new e.Rectangle(r),editable:{events:["move","end","adjust"],async loadEditor(){await e.default("AMap.RectangleEditor")},async initEditor(e,r,t){return new e.RectangleEditor(r,t,this.draggable)},onEdit(e){const r=e.target,n=t.bounds2Array(r.getBounds());this.$emit("update:bounds",n)}}},props:{bounds:n.defineProp({type:Array,deep:!0,setter(e,r){if(this.$props.editable||this.$props.draggable){if(i(t.bounds2Array(e.getBounds()),r))return}e.setBounds(t.makeBounds(r))},getter:e=>t.bounds2Array(e.getBounds()),transform:t.makeBounds,clone:!0,equals:i,events:["dragging","dragend"]})}});exports.default=d;
