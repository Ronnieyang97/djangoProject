"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("./load-plugins.js"),t=require("./mixins/mixins.js"),s=require("./utils/amap-helpers.js"),o=require("./mixins/props.js"),r=require("./mixins/base.js"),a=require("./circle.js"),i=require("./marker.js"),n=require("./polyline.js"),p=require("./polygon.js"),l=require("./rectangle.js");const d=i.default.sealedOptions,c=n.default.sealedOptions,h=p.default.sealedOptions,u=l.default.sealedOptions,m=a.default.sealedOptions;var g=t.default(r.default).extend({amapMeta:{prepare:()=>e.default("AMap.MouseTool"),async initComponent(e){return new e.MouseTool(this.$map)},add(){},remove(){}},props:{mode:o.defineProp({type:String,default:"none"}),clearWhenClose:{type:Boolean,default:!0},options:{type:Object}},data:()=>({drawingMode:void 0}),computed:{$mousetool(){return this.$target}},methods:{close(e){this.$mousetool.close(e)},draw(){const{$mousetool:e,mode:t,drawingMode:o}=this;if(t!==o){switch(t){case"none":this.close(this.clearWhenClose);break;case"marker":e.marker(s.getOptionsFromProps(this,d.props,this.options||{}));break;case"polyline":e.polyline(s.getOptionsFromProps(this,c.props,this.options||{}));break;case"polygon":e.polygon(s.getOptionsFromProps(this,h.props,this.options||{}));break;case"rectangle":e.rectangle(s.getOptionsFromProps(this,u.props,this.options||{}));break;case"circle":e.circle(s.getOptionsFromProps(this,m.props,this.options||{}));break;case"rule":e.rule(s.getOptionsFromProps(this,h.props,this.options||{}));break;case"measureArea":e.measureArea(s.getOptionsFromProps(this,h.props,this.options||{}));break;case"rectZoomIn":e.rectZoomIn(s.getOptionsFromProps(this,h.props,this.options||{}));break;case"rectZoomOut":e.rectZoomOut(s.getOptionsFromProps(this,h.props,this.options||{}))}this.drawingMode=t}},_onDraw(e){if(this.mode!==this.drawingMode)return this.close(!0),void this.draw();const t=e.obj,o=this.drawingMode;let r=t;switch(o){case"marker":r=s.lngLat2Array(t.getPosition());break;case"polyline":case"polygon":r=s.path2Array(t.getPath());break;case"rectangle":r=s.bounds2Array(t.getBounds());break;case"circle":r={center:s.lngLat2Array(t.getCenter()),radius:t.getRadius()};break;case"rule":r={path:s.path2Array(t.getPath()),length:t.getLength()};break;case"measureArea":r={path:s.path2Array(t.getPath()),area:t.getArea()}}this.$emit("draw",o,r),this.$emit("update:mode","none")}},async mounted(){const{$context:e}=this;if(await e.ready,e.destroyed)return;const{$mousetool:t}=this;t.on("draw",this._onDraw),this.$watch("mode",e=>{"none"!==e&&"none"!==this.drawingMode&&this.close(!0),this.draw()},{immediate:!0})}});exports.default=g;
