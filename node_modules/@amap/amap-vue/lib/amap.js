"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e,t=(e=require("vue"))&&"object"==typeof e&&"default"in e?e.default:e,o=require("./utils/defer.js"),r=require("./config.js"),a=require("./load-amap.js");require("./mixins/mixins.js");var n=require("./utils/log.js"),i=require("./utils/amap-helpers.js"),s=require("./mixins/events.js"),d=require("./mixins/props.js");function l(e){return function(t,o){t.setStatus({[e]:o})}}var p=t.extend({name:"Amap",amapMeta:{events:["click","dblclick","rightclick","mapmove","movestart","moveend","hotspotclick","hotspotover","hotspotout","mousemove","mousewheel","mouseover","mouseup","mousedown","zoomchange","zoomstart","zoomend","dragstart","dragging","dragend","resize","touchstart","touchmove","touchend"]},props:{cacheKey:d.defineProp({type:String,initialize:!1}),center:d.defineProp({type:Array,deep:!0,equals:i.theSamePair,setter(e,t){if(!t)return;const o=i.lngLat2Array(e.getCenter());i.nearPair(t,o)||e.setCenter([t[0],t[1]])},getter:e=>i.lngLat2Array(e.getCenter()),events:["mapmove","moveend"]}),zoom:d.defineProp({type:Number,equals:i.near,setter(e,t){if(void 0===t)return;const o=e.getZoom();i.near(o,t)||e.setZoom(t)},getter:"getZoom",events:["zoomchange","zoomend"]}),rotation:d.defineProp({type:Number,equals:i.near,setter:"setRotation",getter:"getRotation",events:["dragging","dragend","moveend","rotateend"]}),pitch:d.defineProp({type:Number,equals:i.near,setter:"setPitch",getter:"getPitch",events:["dragging","dragend","moveend","pitchend"]}),viewMode:{type:String},features:d.defineProp("setFeatures",Array),zooms:{type:Array},dragEnable:d.defineProp({type:Boolean,default:void 0,setter:l("dragEnable")}),zoomEnable:d.defineProp({type:Boolean,default:void 0,setter:l("zoomEnable")}),jogEnable:d.defineProp({type:Boolean,default:void 0,setter:l("jogEnable")}),pitchEnable:d.defineProp({type:Boolean,default:void 0,setter:l("pitchEnable")}),rotateEnable:d.defineProp({type:Boolean,default:void 0,setter:l("rotateEnable")}),animateEnable:d.defineProp({type:Boolean,default:void 0,setter:l("animateEnable")}),keyboardEnable:d.defineProp({type:Boolean,default:void 0,setter:l("keyboardEnable")}),doubleClickZoom:d.defineProp({type:Boolean,default:void 0,setter:l("doubleClickZoom")}),scrollWheel:d.defineProp({type:Boolean,default:void 0,setter:l("scrollWheel")}),touchZoom:{type:Boolean,default:void 0},touchZoomCenter:{type:Boolean,default:void 0},showLabel:{type:Boolean,default:void 0},defaultCursor:d.defineProp("setDefaultCursor",String),isHotspot:d.defineProp({type:Boolean,default:void 0,setter:l("isHotspot")}),mapStyle:d.defineProp("setMapStyle",String),wallColor:{type:String},roofColor:{type:String},skyColor:{type:String},showBuildingBlock:{type:Boolean,default:void 0},showIndoorMap:d.defineProp({type:Boolean,default:void 0,setter:l("showIndoorMap")}),mask:{type:Array}},data:()=>({ready:!1}),computed:{$context(){return this.$amap.context},$map(){return this.$context.target}},methods:{_clear(){const{$context:e}=this;e.ready.then(()=>{s.unbindEvents(this);const{$map:e}=this;e.clearMap(),e.clearInfoWindow()})},_getContainer(e){const{cacheKey:t}=this;if(!r.default._disableMapCache&&t){const o="amap-vue-container-inner-"+t;let r=document.getElementById(o)||this.$el.querySelector("#"+o);return r||(r=document.createElement("div"),r.className="amap-vue-container-inner",r.setAttribute("id",o),r.setAttribute("style","position:relative; width:100%; height:100%;")),e?(this.$el.insertAdjacentElement("afterbegin",r),r.style.display="block",r.style.pointerEvents="initial"):(r.style.display="none",r.style.pointerEvents="none"),r}return this.$el}},beforeCreate(){a.default();const e=o.default(),t={AMap:null,wrapper:null,ready:e.promise,target:null,vm:this,destroyed:!1};this.$amap={events:{},ready:e,context:t,logger:n.createLogger(this)}},async mounted(){const{$context:e}=this,t=await a.default();if(e.AMap=t,e.destroyed)return;const o=i.getOptionsFromProps(this),r=this._getContainer(!0),n=!!r.$amap;if(n)for(let e in o){const t=this.$options.props[e],a=o[e];d.setPropValue(this,r.$amap,t,a)}else r.$amap=new t.Map(r,o);const l=r.$amap;e.wrapper=r,e.target=l,d.bindProps(this),s.bindEvents(this);const p=async()=>{this.ready=!0,this.$amap.ready.resolve(l),await this.$nextTick(),this.$emit("complete",l)};n?p():l.on("complete",p)},destroyed(){const{$context:e}=this;if(!r.default._disableMapCache&&this.cacheKey){const e=this._getContainer(!1);document.body.appendChild(e),this._clear()}else e.target&&e.target.destroy();e.destroyed=!0},provide(){return{$amapMap:this.$context}},render(e){let t=this.$slots.default;return this.ready||(t=void 0),e("div",{class:"amap-vue-container",style:"position:relative; width:100%; height:100%;"},t)}});exports.default=p;
