{"remainingRequest":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-amap/src/lib/components/amap.vue?vue&type=style&index=0&lang=less","dependencies":[{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-amap/src/lib/components/amap.vue","mtime":1553742980000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":499162500000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/node_modules/less-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-loader-v16/dist/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5lbC12dWUtYW1hcC1jb250YWluZXIgewogIGhlaWdodDogMTAwJTsKLmVsLXZ1ZS1hbWFwIHsKICAgIGhlaWdodDogMTAwJTsKICB9Cn0K"},{"version":3,"sources":["/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-amap/src/lib/components/amap.vue"],"names":[],"mappings":";AAyOA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACT,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACd;AACF","file":"/Users/ronnie/PycharmProjects/djangoProject/appfront/node_modules/vue-amap/src/lib/components/amap.vue","sourceRoot":"","sourcesContent":["<template>\n<div class=\"el-vue-amap-container\">\n    <div class=\"el-vue-amap\"></div>\n    <slot></slot>\n</div>\n</template>\n<script>\nimport guid from '../utils/guid';\nimport CONST from '../utils/constant';\nimport { lngLatTo, toLngLat, toPixel } from '../utils/convert-helper';\nimport registerMixin from '../mixins/register-component';\nimport {lazyAMapApiLoaderInstance} from '../services/injected-amap-api-instance';\nexport default {\n  name: 'el-amap',\n  mixins: [registerMixin],\n  props: [\n  //  add v1.4.0 new feature\n    'viewMode',\n    'skyColor',\n    'rotateEnable',\n    'pitch',\n    'buildingAnimation',\n    'pitchEnable',\n\n    'vid',\n    'events',\n    'center',\n    'zoom',\n    'draggEnable',\n    'level',\n    'zooms',\n    'lang',\n    'defaultCursor',\n    'crs',\n    'animateEnable',\n    'isHotspot',\n    'defaultLayer',\n    'rotateEnable',\n    'resizeEnable',\n    'showIndoorMap',\n    'indoorMap',\n    'expandZoomRange',\n    'dragEnable',\n    'zoomEnable',\n    'doubleClickZoom',\n    'keyboardEnable',\n    'jogEnable',\n    'scrollWheel',\n    'touchZoom',\n    'mapStyle',\n    'plugin',\n    'features',\n    'amapManager'  // 地图管理 manager\n  ],\n\n  beforeCreate() {\n    this._loadPromise = lazyAMapApiLoaderInstance.load();\n  },\n\n  destroyed() {\n    this.$amap && this.$amap.destroy();\n  },\n\n  computed: {\n    /**\n    * convert plugin prop from 'plugin' to 'plugins'\n    * unify plugin options\n    * @return {Array}\n    */\n    plugins() {\n      let plus = [];\n      // amap plugin prefix reg\n      const amap_prefix_reg = /^AMap./;\n\n      // parse plugin full name\n      const parseFullName = (pluginName) => {\n        return amap_prefix_reg.test(pluginName) ? pluginName : 'AMap.' + pluginName;\n      };\n\n      // parse plugin short name\n      const parseShortName = (pluginName) => {\n        return pluginName.replace(amap_prefix_reg, '');\n      };\n\n      if (typeof this.plugin === 'string') {\n        plus.push({\n          pName: parseFullName(this.plugin),\n          sName: parseShortName(this.plugin)\n        });\n      } else if (this.plugin instanceof Array) {\n        plus = this.plugin.map(oPlugin => {\n          let nPlugin = {};\n\n          if (typeof oPlugin === 'string') {\n            nPlugin = {\n              pName: parseFullName(oPlugin),\n              sName: parseShortName(oPlugin)\n            };\n          } else {\n            oPlugin.pName = parseFullName(oPlugin.pName);\n            oPlugin.sName = parseShortName(oPlugin.pName);\n            nPlugin = oPlugin;\n          }\n          return nPlugin;\n        });\n      }\n      return plus;\n    }\n  },\n\n  data() {\n    return {\n      converters: {\n        center(arr) {\n          return toLngLat(arr);\n        }\n      },\n      handlers: {\n        zoomEnable(flag) {\n          this.setStatus({zoomEnable: flag});\n        },\n        dragEnable(flag) {\n          this.setStatus({dragEnable: flag});\n        },\n        rotateEnable(flag) {\n          this.setStatus({rotateEnable: flag});\n        }\n      }\n    };\n  },\n\n  mounted() {\n    this.createMap();\n  },\n\n  addEvents() {\n    this.$amapComponent.on('moveend', () => {\n      let centerLngLat = this.$amapComponent.getCenter();\n      this.center = [centerLngLat.getLng(), centerLngLat.getLat()];\n    });\n  },\n\n  methods: {\n    addPlugins() {\n      let _notInjectPlugins = this.plugins.filter(_plugin => !AMap[_plugin.sName]);\n\n      if (!_notInjectPlugins || !_notInjectPlugins.length) return this.addMapControls();\n      return this.$amapComponent.plugin(_notInjectPlugins, this.addMapControls);\n    },\n\n    addMapControls() {\n      if (!this.plugins || !this.plugins.length) return;\n\n      //  store plugin instances\n      this.$plugins = this.$plugins || {};\n\n      this.plugins.forEach(_plugin => {\n        const realPluginOptions = this.convertAMapPluginProps(_plugin);\n        const pluginInstance = this.$plugins[realPluginOptions.pName] = new AMap[realPluginOptions.sName](realPluginOptions);\n\n        // add plugin into map\n        this.$amapComponent.addControl(pluginInstance);\n\n        // register plugin event\n        if (_plugin.events) {\n          for (let k in _plugin.events) {\n            let v = _plugin.events[k];\n            if (k === 'init') v(pluginInstance);\n            else AMap.event.addListener(pluginInstance, k, v);\n          }\n        }\n      });\n    },\n\n    /**\n    * parse plugin\n    * @param  {Object}\n    * @return {Object}\n    */\n    convertAMapPluginProps(plugin) {\n\n      if (typeof plugin === 'object' && plugin.pName) {\n        switch (plugin.pName) {\n          case 'AMap.ToolBar': {\n            // parse offset\n            if (plugin.offset && plugin.offset instanceof Array) {\n              plugin.offset = toPixel(plugin.offset);\n            }\n            break;\n          }\n          case 'AMap.Scale': {\n            // parse offset\n            if (plugin.offset && plugin.offset instanceof Array) {\n              plugin.offset = toPixel(plugin.offset);\n            }\n            break;\n          }\n        }\n        return plugin;\n      } else {\n        return '';\n      }\n    },\n\n    setStatus(option) {\n      this.$amap.setStatus(option);\n    },\n\n    createMap() {\n      this._loadPromise.then(() => {\n        let mapElement = this.$el.querySelector('.el-vue-amap');\n        const elementID = this.vid || guid();\n        mapElement.id = elementID;\n        this.$amap = this.$amapComponent = new AMap.Map(elementID, this.convertProps());\n        if (this.amapManager) this.amapManager.setMap(this.$amap);\n        this.$emit(CONST.AMAP_READY_EVENT, this.$amap);\n        this.$children.forEach(component => {\n          component.$emit(CONST.AMAP_READY_EVENT, this.$amap);\n        });\n        if (this.plugins && this.plugins.length) {\n          this.addPlugins();\n        }\n      });\n    },\n    $$getCenter() {\n      if (!this.$amap) return lngLatTo(this.center);\n      return lngLatTo(this.$amap.getCenter());\n    }\n  }\n};\n</script>\n\n<style lang=\"less\">\n.el-vue-amap-container {\n  height: 100%;\n.el-vue-amap {\n    height: 100%;\n  }\n}\n</style>\n"]}]}